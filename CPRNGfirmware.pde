#include "sha256.h"

#define BLOCKSIZE 64
//Global scope variable to track the amount of data recorded so far.
int blockloc;
//Global scope variable to store timing data before hashing it
uint8_t block[BLOCKSIZE];

//our test blocks
uint8_t testone[] = {0xba,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xfa};
                      
uint8_t testtwo[] = {0xaa,0xba,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xba,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
                      0xaa,0xaa,0xaa,0xaa};
                      


void setup() {
  blockloc = 0;
  for(int i = 0; i < BLOCKSIZE; i++) {
    block[i] = 0;
  }
  Serial.begin(9600);
  delay(2000);
  
  //Test
  
  Serial.println("One:");
  for(int i = 0; i < BLOCKSIZE; i++){
    addTimeData(testone[i]);
  }
  Serial.println("Two:");
  for(int i = 0; i < BLOCKSIZE; i++){
    addTimeData(testone[i]);
  }
  Serial.println("Three:");
  for(int i = 0; i < BLOCKSIZE; i++){
    addTimeData(testtwo[i]);
  }
  Serial.println("Four:");
  for(int i = 0; i < BLOCKSIZE; i++){
    addTimeData(testtwo[i]);
  }
  
}

void loop() {

}

void addTimeData(uint8_t data) {
  if (blockloc < BLOCKSIZE){
    block[blockloc] = data;
    blockloc++;
  }
  if(blockloc == BLOCKSIZE) {
    hashAndPrint();
    blockloc = 0;
    for(int i = 0; i < BLOCKSIZE; i++){
      block[i] = 0;
    }
  }
}

void hashAndPrint() {
 Sha256.init();
 for(int i = 0; i < BLOCKSIZE; i++) {
   Sha256.print(block[i]);
 } 
 printHash(Sha256.result());
}

void printHash(uint8_t* hash) {
  int i;
  for (i=0; i<32; i++) {
    Serial.print("0123456789abcdef"[hash[i]>>4]);
    Serial.print("0123456789abcdef"[hash[i]&0xf]);
  }
  Serial.println();
  delay(1000);
}
